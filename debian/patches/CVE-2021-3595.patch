From: Markus Koschany <apo@debian.org>
Date: Wed, 1 Sep 2021 13:01:41 +0200
Subject: CVE-2021-3595

Bug-Debian: https://bugs.debian.org/989996
Origin: https://gitlab.freedesktop.org/slirp/libslirp/-/commit/93e645e72a056ec0b2c16e0299fc5c6b94e4ca17
Origin: https://gitlab.freedesktop.org/slirp/libslirp/-/commit/3f17948137155f025f7809fdc38576d5d2451c3d
Origin: https://gitlab.freedesktop.org/slirp/libslirp/-/commit/990163cf3ac86b7875559f49602c4d76f46f6f30
---
 slirp/tftp.c | 59 ++++++++++++++++++++++++++++++++---------------------------
 slirp/tftp.h |  6 +++++-
 2 files changed, 37 insertions(+), 28 deletions(-)

diff --git a/slirp/tftp.c b/slirp/tftp.c
index c185906..830dcad 100644
--- a/slirp/tftp.c
+++ b/slirp/tftp.c
@@ -48,7 +48,7 @@ static void tftp_session_terminate(struct tftp_session *spt)
 }
 
 static int tftp_session_allocate(Slirp *slirp, struct sockaddr_storage *srcsas,
-                                 struct tftp_t *tp)
+                                 struct tftphdr *hdr)
 {
   struct tftp_session *spt;
   int k;
@@ -72,7 +72,7 @@ static int tftp_session_allocate(Slirp *slirp, struct sockaddr_storage *srcsas,
   memset(spt, 0, sizeof(*spt));
   spt->client_addr = *srcsas;
   spt->fd = -1;
-  spt->client_port = tp->udp.uh_sport;
+  spt->client_port = hdr->udp.uh_sport;
   spt->slirp = slirp;
 
   tftp_session_update(spt);
@@ -81,7 +81,7 @@ static int tftp_session_allocate(Slirp *slirp, struct sockaddr_storage *srcsas,
 }
 
 static int tftp_session_find(Slirp *slirp, struct sockaddr_storage *srcsas,
-                             struct tftp_t *tp)
+                             struct tftphdr *hdr)
 {
   struct tftp_session *spt;
   int k;
@@ -91,7 +91,7 @@ static int tftp_session_find(Slirp *slirp, struct sockaddr_storage *srcsas,
 
     if (tftp_session_in_use(spt)) {
       if (sockaddr_equal(&spt->client_addr, srcsas)) {
-	if (spt->client_port == tp->udp.uh_sport) {
+	if (spt->client_port == hdr->udp.uh_sport) {
 	  return k;
 	}
       }
@@ -143,13 +143,13 @@ static struct tftp_t *tftp_prep_mbuf_data(struct tftp_session *spt,
 }
 
 static void tftp_udp_output(struct tftp_session *spt, struct mbuf *m,
-                            struct tftp_t *recv_tp)
+                            struct tftphdr *hdr)
 {
     if (spt->client_addr.ss_family == AF_INET6) {
         struct sockaddr_in6 sa6, da6;
 
         sa6.sin6_addr = spt->slirp->vhost_addr6;
-        sa6.sin6_port = recv_tp->udp.uh_dport;
+        sa6.sin6_port = hdr->udp.uh_dport;
         da6.sin6_addr = ((struct sockaddr_in6 *)&spt->client_addr)->sin6_addr;
         da6.sin6_port = spt->client_port;
 
@@ -158,7 +158,7 @@ static void tftp_udp_output(struct tftp_session *spt, struct mbuf *m,
         struct sockaddr_in sa4, da4;
 
         sa4.sin_addr = spt->slirp->vhost_addr;
-        sa4.sin_port = recv_tp->udp.uh_dport;
+        sa4.sin_port = hdr->udp.uh_dport;
         da4.sin_addr = ((struct sockaddr_in *)&spt->client_addr)->sin_addr;
         da4.sin_port = spt->client_port;
 
@@ -181,7 +181,7 @@ static int tftp_send_oack(struct tftp_session *spt,
 
     tp = tftp_prep_mbuf_data(spt, m);
 
-    tp->tp_op = htons(TFTP_OACK);
+    tp->hdr.tp_op = htons(TFTP_OACK);
     for (i = 0; i < nb; i++) {
         n += snprintf(tp->x.tp_buf + n, sizeof(tp->x.tp_buf) - n, "%s",
                       keys[i]) + 1;
@@ -190,7 +190,7 @@ static int tftp_send_oack(struct tftp_session *spt,
     }
 
     m->m_len = sizeof(struct tftp_t) - 514 + n - sizeof(struct udphdr);
-    tftp_udp_output(spt, m, recv_tp);
+    tftp_udp_output(spt, m, &recv_tp->hdr);
 
     return 0;
 }
@@ -210,20 +210,20 @@ static void tftp_send_error(struct tftp_session *spt,
 
   tp = tftp_prep_mbuf_data(spt, m);
 
-  tp->tp_op = htons(TFTP_ERROR);
+  tp->hdr.tp_op = htons(TFTP_ERROR);
   tp->x.tp_error.tp_error_code = htons(errorcode);
   pstrcpy((char *)tp->x.tp_error.tp_msg, sizeof(tp->x.tp_error.tp_msg), msg);
 
   m->m_len = sizeof(struct tftp_t) - 514 + 3 + strlen(msg)
              - sizeof(struct udphdr);
-  tftp_udp_output(spt, m, recv_tp);
+  tftp_udp_output(spt, m, &recv_tp->hdr);
 
 out:
   tftp_session_terminate(spt);
 }
 
 static void tftp_send_next_block(struct tftp_session *spt,
-                                 struct tftp_t *recv_tp)
+                                 struct tftphdr *hdr)
 {
   struct mbuf *m;
   struct tftp_t *tp;
@@ -237,7 +237,7 @@ static void tftp_send_next_block(struct tftp_session *spt,
 
   tp = tftp_prep_mbuf_data(spt, m);
 
-  tp->tp_op = htons(TFTP_DATA);
+  tp->hdr.tp_op = htons(TFTP_DATA);
   tp->x.tp_data.tp_block_nr = htons((spt->block_nr + 1) & 0xffff);
 
   nobytes = tftp_read_data(spt, spt->block_nr, tp->x.tp_data.tp_buf, 512);
@@ -253,7 +253,7 @@ static void tftp_send_next_block(struct tftp_session *spt,
   }
 
   m->m_len = sizeof(struct tftp_t) - (512 - nobytes) - sizeof(struct udphdr);
-  tftp_udp_output(spt, m, recv_tp);
+  tftp_udp_output(spt, m, hdr);
 
   if (nobytes == 512) {
     tftp_session_update(spt);
@@ -277,12 +277,12 @@ static void tftp_handle_rrq(Slirp *slirp, struct sockaddr_storage *srcsas,
   int nb_options = 0;
 
   /* check if a session already exists and if so terminate it */
-  s = tftp_session_find(slirp, srcsas, tp);
+  s = tftp_session_find(slirp, srcsas, &tp->hdr);
   if (s >= 0) {
     tftp_session_terminate(&slirp->tftp_sessions[s]);
   }
 
-  s = tftp_session_allocate(slirp, srcsas, tp);
+  s = tftp_session_allocate(slirp, srcsas, &tp->hdr);
 
   if (s < 0) {
     return;
@@ -404,29 +404,29 @@ static void tftp_handle_rrq(Slirp *slirp, struct sockaddr_storage *srcsas,
   }
 
   spt->block_nr = 0;
-  tftp_send_next_block(spt, tp);
+  tftp_send_next_block(spt, &tp->hdr);
 }
 
 static void tftp_handle_ack(Slirp *slirp, struct sockaddr_storage *srcsas,
-                            struct tftp_t *tp, int pktlen)
+                            struct tftphdr *hdr)
 {
   int s;
 
-  s = tftp_session_find(slirp, srcsas, tp);
+  s = tftp_session_find(slirp, srcsas, hdr);
 
   if (s < 0) {
     return;
   }
 
-  tftp_send_next_block(&slirp->tftp_sessions[s], tp);
+  tftp_send_next_block(&slirp->tftp_sessions[s], hdr);
 }
 
 static void tftp_handle_error(Slirp *slirp, struct sockaddr_storage *srcsas,
-                              struct tftp_t *tp, int pktlen)
+                              struct tftphdr *hdr)
 {
   int s;
 
-  s = tftp_session_find(slirp, srcsas, tp);
+  s = tftp_session_find(slirp, srcsas, hdr);
 
   if (s < 0) {
     return;
@@ -437,19 +437,24 @@ static void tftp_handle_error(Slirp *slirp, struct sockaddr_storage *srcsas,
 
 void tftp_input(struct sockaddr_storage *srcsas, struct mbuf *m)
 {
-  struct tftp_t *tp = (struct tftp_t *)m->m_data;
+  struct tftphdr *hdr = mtod_check(m, sizeof(struct tftphdr));
+    if (hdr == NULL) {
+       return;
+    }
 
-  switch(ntohs(tp->tp_op)) {
+  switch (ntohs(hdr->tp_op)) {
   case TFTP_RRQ:
-    tftp_handle_rrq(m->slirp, srcsas, tp, m->m_len);
+    tftp_handle_rrq(m->slirp, srcsas,
+                     mtod(m, struct tftp_t *),
+                     m->m_len);
     break;
 
   case TFTP_ACK:
-    tftp_handle_ack(m->slirp, srcsas, tp, m->m_len);
+    tftp_handle_ack(m->slirp, srcsas, hdr);
     break;
 
   case TFTP_ERROR:
-    tftp_handle_error(m->slirp, srcsas, tp, m->m_len);
+    tftp_handle_error(m->slirp, srcsas, hdr);
     break;
   }
 }
diff --git a/slirp/tftp.h b/slirp/tftp.h
index 2cd276d..558f1b6 100644
--- a/slirp/tftp.h
+++ b/slirp/tftp.h
@@ -16,9 +16,13 @@
 
 #define TFTP_FILENAME_MAX 512
 
-struct tftp_t {
+struct tftphdr {
   struct udphdr udp;
   uint16_t tp_op;
+};
+
+struct tftp_t {
+  struct tftphdr hdr;
   union {
     struct {
       uint16_t tp_block_nr;
